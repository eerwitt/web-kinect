!!!
%html
  %head
    %title KinectWeb
    %meta{:charset => "utf-8"}
    %meta{:name => "viewport", :content => "width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0"}
    
    %script{:src => "https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.js", :type => "text/javascript"}
    %script{:src => "/javascripts/three.js/build/Three.js", :type => "text/javascript"}
    %script{:src => "/javascripts/LZMA-JS/src/lzma.js", :type => "text/javascript"}

    :javascript
      function drawPoint2D(point) {
        var context = $('#display_2d')[0].getContext("2d");
        context.fillStyle = "rgb("+ Math.round( 255 - (point.z * 255) ) + ",0,0)";
        context.fillRect(point.x / 640 * 640, point.y / 480 * 480,  10, 10);
      }

      var camera, scene, renderer;

      var meshes = {};

      $(document).ready(function() {
        init();
        animate();
      });

      function init() {
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 10000 );
        camera.position.x = - 640 / 2;
        camera.position.y = - 480 / 2;
        camera.position.z = 200;
        scene.add( camera );

        renderer = new THREE.CanvasRenderer();
        renderer.setSize( window.innerWidth, window.innerHeight );

        var element = renderer.domElement;
        $(element).mousemove(updateCamera);
        document.body.appendChild( element );
      }

      function animate() {
        // note: three.js includes requestAnimationFrame shim
        requestAnimationFrame( animate );
        render();
      }

      function updateCamera(e) {
        var halfWidth = window.innerWidth/2, 
          halfHeight = window.innerHeight/2,
          mouseX = event.clientX - halfWidth,
          mouseY = event.clientY - halfHeight;

        camera.position.x += ( mouseX - camera.position.x ) * 0.05;
        camera.position.y += ( - mouseY - camera.position.y ) * 0.05;
        camera.lookAt( scene.position );
      }

      function render() {
        renderer.render( scene, camera );
      }

      function createMesh(point) {
        if(meshes[point.x] == undefined) {
          meshes[point.x] = {};
        }

        if(meshes[point.x][point.y] == undefined) {
          var geometry = new THREE.CubeGeometry( 8, 8, 8 );
          var material = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: true } );

          var mesh = new THREE.Mesh( geometry, material );
          scene.add( mesh );

          mesh.position.x = -point.x;
          mesh.position.y = -point.y;

          meshes[point.x][point.y] = mesh;
        }

        var mesh = meshes[point.x][point.y]
        mesh.position.z = -(point.z * 100.0);
      }

      function updateData(points) {
        $.each(points, function(i, point) {
          createMesh(point);
        });
      }

      var SocketKlass = "MozWebSocket" in window ? MozWebSocket : WebSocket;
      var ws = new SocketKlass('ws://localhost:3000/echo');

      ws.onopen = function() {
        console.log("conneted");
      };

      var lzma = new LZMA("/javascripts/LZMA-JS/src/lzma_worker.js");
      ws.onmessage = function(e) {
        debugger
        lzma.decompress(e.data, updateData, function(percent) {console.log(percent)});
      };

      ws.onclose = function() {
        console.log("closed");
      }; 

      ws.onerror = function() {
        alert("error");
      };

  %body
